<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/HIExporting.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/HIExporting</TokenIdentifier>
			<Abstract type="html">description: Options for the exporting module. For an overview on the matter, see http://www.highcharts.com/docs/export-module/export-module-overview : the docs.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
            
			
			<NodeRef refid="47"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setWidth:</TokenIdentifier>
			<Abstract type="html">* description: The pixel width of charts exported to PNG or JPG. As of Highcharts
3.0, the default pixel width is a function of the chart.width or exporting.sourceWidth and the
exporting.scale.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *width</Declaration>
			
			
			<Anchor>//api/name/width</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/width</TokenIdentifier>
			<Abstract type="html">* description: The pixel width of charts exported to PNG or JPG. As of Highcharts
3.0, the default pixel width is a function of the chart.width or exporting.sourceWidth and the
exporting.scale.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *width</Declaration>
			
			
			<Anchor>//api/name/width</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/width</TokenIdentifier>
			<Abstract type="html">* description: The pixel width of charts exported to PNG or JPG. As of Highcharts
3.0, the default pixel width is a function of the chart.width or exporting.sourceWidth and the
exporting.scale.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *width</Declaration>
			
			
			<Anchor>//api/name/width</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setLibURL:</TokenIdentifier>
			<Abstract type="html">* description: Path where Highcharts will look for export module dependencies to
load on demand if they don&apos;t already exist on window. Should currently
point to location of https://github.com/canvg/canvg : CanVG library,
https://github.com/canvg/canvg : RGBColor.js, https://github.
com/yWorks/jsPDF : jsPDF and https://github.com/yWorks/svg2pdf.
js : svg2pdf.js, required for client side export in certain browsers.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *libURL</Declaration>
			
			
			<Anchor>//api/name/libURL</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/libURL</TokenIdentifier>
			<Abstract type="html">* description: Path where Highcharts will look for export module dependencies to
load on demand if they don&apos;t already exist on window. Should currently
point to location of https://github.com/canvg/canvg : CanVG library,
https://github.com/canvg/canvg : RGBColor.js, https://github.
com/yWorks/jsPDF : jsPDF and https://github.com/yWorks/svg2pdf.
js : svg2pdf.js, required for client side export in certain browsers.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *libURL</Declaration>
			
			
			<Anchor>//api/name/libURL</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/libURL</TokenIdentifier>
			<Abstract type="html">* description: Path where Highcharts will look for export module dependencies to
load on demand if they don&apos;t already exist on window. Should currently
point to location of https://github.com/canvg/canvg : CanVG library,
https://github.com/canvg/canvg : RGBColor.js, https://github.
com/yWorks/jsPDF : jsPDF and https://github.com/yWorks/svg2pdf.
js : svg2pdf.js, required for client side export in certain browsers.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *libURL</Declaration>
			
			
			<Anchor>//api/name/libURL</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setError:</TokenIdentifier>
			<Abstract type="html">* description: Function to call if the offline-exporting module fails to export
a chart on the client side, and fallbackToExportServer is disabled. If left undefined, an exception
is thrown instead.
* default: undefined</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/error</TokenIdentifier>
			<Abstract type="html">* description: Function to call if the offline-exporting module fails to export
a chart on the client side, and fallbackToExportServer is disabled. If left undefined, an exception
is thrown instead.
* default: undefined</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/error</TokenIdentifier>
			<Abstract type="html">* description: Function to call if the offline-exporting module fails to export
a chart on the client side, and fallbackToExportServer is disabled. If left undefined, an exception
is thrown instead.
* default: undefined</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setFallbackToExportServer:</TokenIdentifier>
			<Abstract type="html">* description: Whether or not to fall back to the export server if the offline-exporting
module is unable to export the chart on the client side.
* default: true</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *fallbackToExportServer</Declaration>
			
			
			<Anchor>//api/name/fallbackToExportServer</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/fallbackToExportServer</TokenIdentifier>
			<Abstract type="html">* description: Whether or not to fall back to the export server if the offline-exporting
module is unable to export the chart on the client side.
* default: true</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *fallbackToExportServer</Declaration>
			
			
			<Anchor>//api/name/fallbackToExportServer</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/fallbackToExportServer</TokenIdentifier>
			<Abstract type="html">* description: Whether or not to fall back to the export server if the offline-exporting
module is unable to export the chart on the client side.
* default: true</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *fallbackToExportServer</Declaration>
			
			
			<Anchor>//api/name/fallbackToExportServer</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setPrintMaxWidth:</TokenIdentifier>
			<Abstract type="html">* description: When printing the chart from the menu item in the burger menu, if
the on-screen chart exceeds this width, it is resized. After printing
or cancelled, it is restored. The default width makes the chart
fit into typical paper format. Note that this does not affect the
chart when printing the web page as a whole.
* default: 780</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *printMaxWidth</Declaration>
			
			
			<Anchor>//api/name/printMaxWidth</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/printMaxWidth</TokenIdentifier>
			<Abstract type="html">* description: When printing the chart from the menu item in the burger menu, if
the on-screen chart exceeds this width, it is resized. After printing
or cancelled, it is restored. The default width makes the chart
fit into typical paper format. Note that this does not affect the
chart when printing the web page as a whole.
* default: 780</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *printMaxWidth</Declaration>
			
			
			<Anchor>//api/name/printMaxWidth</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/printMaxWidth</TokenIdentifier>
			<Abstract type="html">* description: When printing the chart from the menu item in the burger menu, if
the on-screen chart exceeds this width, it is resized. After printing
or cancelled, it is restored. The default width makes the chart
fit into typical paper format. Note that this does not affect the
chart when printing the web page as a whole.
* default: 780</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *printMaxWidth</Declaration>
			
			
			<Anchor>//api/name/printMaxWidth</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setScale:</TokenIdentifier>
			<Abstract type="html">* description: Defines the scale or zoom factor for the exported image compared
to the on-screen display. While for instance a 600px wide chart
may look good on a website, it will look bad in print. The default
scale of 2 makes this chart export to a 1200px PNG or JPG.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/scale</TokenIdentifier>
			<Abstract type="html">* description: Defines the scale or zoom factor for the exported image compared
to the on-screen display. While for instance a 600px wide chart
may look good on a website, it will look bad in print. The default
scale of 2 makes this chart export to a 1200px PNG or JPG.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/scale</TokenIdentifier>
			<Abstract type="html">* description: Defines the scale or zoom factor for the exported image compared
to the on-screen display. While for instance a 600px wide chart
may look good on a website, it will look bad in print. The default
scale of 2 makes this chart export to a 1200px PNG or JPG.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *scale</Declaration>
			
			
			<Anchor>//api/name/scale</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setFormAttributes:</TokenIdentifier>
			<Abstract type="html">* description: An object containing additional attributes for the POST form that
sends the SVG to the export server. For example, a target can be
set to make sure the generated image is received in another frame,
or a custom enctype or encoding can be set.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id formAttributes</Declaration>
			
			
			<Anchor>//api/name/formAttributes</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/formAttributes</TokenIdentifier>
			<Abstract type="html">* description: An object containing additional attributes for the POST form that
sends the SVG to the export server. For example, a target can be
set to make sure the generated image is received in another frame,
or a custom enctype or encoding can be set.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id formAttributes</Declaration>
			
			
			<Anchor>//api/name/formAttributes</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/formAttributes</TokenIdentifier>
			<Abstract type="html">* description: An object containing additional attributes for the POST form that
sends the SVG to the export server. For example, a target can be
set to make sure the generated image is received in another frame,
or a custom enctype or encoding can be set.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id formAttributes</Declaration>
			
			
			<Anchor>//api/name/formAttributes</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setUrl:</TokenIdentifier>
			<Abstract type="html">* description: The URL for the server module converting the SVG string to an image
format. By default this points to Highchart&apos;s free web service.
* default: https://export.highcharts.com/</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *url</Declaration>
			
			
			<Anchor>//api/name/url</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/url</TokenIdentifier>
			<Abstract type="html">* description: The URL for the server module converting the SVG string to an image
format. By default this points to Highchart&apos;s free web service.
* default: https://export.highcharts.com/</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *url</Declaration>
			
			
			<Anchor>//api/name/url</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/url</TokenIdentifier>
			<Abstract type="html">* description: The URL for the server module converting the SVG string to an image
format. By default this points to Highchart&apos;s free web service.
* default: https://export.highcharts.com/</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *url</Declaration>
			
			
			<Anchor>//api/name/url</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setButtons:</TokenIdentifier>
			<Abstract type="html">* description: Options for the export related buttons, print and export. In addition
to the default buttons listed here, custom buttons can be added.
See navigation.buttonOptions for general
options.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIButtons *buttons</Declaration>
			
			
			<Anchor>//api/name/buttons</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/buttons</TokenIdentifier>
			<Abstract type="html">* description: Options for the export related buttons, print and export. In addition
to the default buttons listed here, custom buttons can be added.
See navigation.buttonOptions for general
options.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIButtons *buttons</Declaration>
			
			
			<Anchor>//api/name/buttons</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/buttons</TokenIdentifier>
			<Abstract type="html">* description: Options for the export related buttons, print and export. In addition
to the default buttons listed here, custom buttons can be added.
See navigation.buttonOptions for general
options.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIButtons *buttons</Declaration>
			
			
			<Anchor>//api/name/buttons</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setAllowHTML:</TokenIdentifier>
			<Abstract type="html">* description: Experimental setting to allow HTML inside the chart (added through
the useHTML options), directly in the exported image. This allows
you to preserve complicated HTML structures like tables or bi-directional
text in exported charts.
Disclaimer: The HTML is rendered in a foreignObject tag in the
generated SVG. The official export server is based on PhantomJS,
which supports this, but other SVG clients, like Batik, does not
support it. This also applies to downloaded SVG that you want to
open in a desktop client.
* default: false</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *allowHTML</Declaration>
			
			
			<Anchor>//api/name/allowHTML</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/allowHTML</TokenIdentifier>
			<Abstract type="html">* description: Experimental setting to allow HTML inside the chart (added through
the useHTML options), directly in the exported image. This allows
you to preserve complicated HTML structures like tables or bi-directional
text in exported charts.
Disclaimer: The HTML is rendered in a foreignObject tag in the
generated SVG. The official export server is based on PhantomJS,
which supports this, but other SVG clients, like Batik, does not
support it. This also applies to downloaded SVG that you want to
open in a desktop client.
* default: false</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *allowHTML</Declaration>
			
			
			<Anchor>//api/name/allowHTML</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/allowHTML</TokenIdentifier>
			<Abstract type="html">* description: Experimental setting to allow HTML inside the chart (added through
the useHTML options), directly in the exported image. This allows
you to preserve complicated HTML structures like tables or bi-directional
text in exported charts.
Disclaimer: The HTML is rendered in a foreignObject tag in the
generated SVG. The official export server is based on PhantomJS,
which supports this, but other SVG clients, like Batik, does not
support it. This also applies to downloaded SVG that you want to
open in a desktop client.
* default: false</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *allowHTML</Declaration>
			
			
			<Anchor>//api/name/allowHTML</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setType:</TokenIdentifier>
			<Abstract type="html">* description: Default MIME type for exporting if chart.exportChart() is called
without specifying a type option. Possible values are image/png,
image/jpeg, application/pdf and image/svg+xml.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *type</Declaration>
			
			
			<Anchor>//api/name/type</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/type</TokenIdentifier>
			<Abstract type="html">* description: Default MIME type for exporting if chart.exportChart() is called
without specifying a type option. Possible values are image/png,
image/jpeg, application/pdf and image/svg+xml.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *type</Declaration>
			
			
			<Anchor>//api/name/type</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/type</TokenIdentifier>
			<Abstract type="html">* description: Default MIME type for exporting if chart.exportChart() is called
without specifying a type option. Possible values are image/png,
image/jpeg, application/pdf and image/svg+xml.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *type</Declaration>
			
			
			<Anchor>//api/name/type</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setCsv:</TokenIdentifier>
			<Abstract type="html">* description: Options for exporting data to CSV or ExCel, or displaying the data
in a HTML table or a JavaScript structure. Requires the
export-data.js module. This module adds data export options to the
export menu and provides functions like Chart.getCSV,
Chart.getTable, Chart.getDataRows and Chart.viewData.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HICsv *csv</Declaration>
			
			
			<Anchor>//api/name/csv</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/csv</TokenIdentifier>
			<Abstract type="html">* description: Options for exporting data to CSV or ExCel, or displaying the data
in a HTML table or a JavaScript structure. Requires the
export-data.js module. This module adds data export options to the
export menu and provides functions like Chart.getCSV,
Chart.getTable, Chart.getDataRows and Chart.viewData.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HICsv *csv</Declaration>
			
			
			<Anchor>//api/name/csv</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/csv</TokenIdentifier>
			<Abstract type="html">* description: Options for exporting data to CSV or ExCel, or displaying the data
in a HTML table or a JavaScript structure. Requires the
export-data.js module. This module adds data export options to the
export menu and provides functions like Chart.getCSV,
Chart.getTable, Chart.getDataRows and Chart.viewData.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HICsv *csv</Declaration>
			
			
			<Anchor>//api/name/csv</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setSourceWidth:</TokenIdentifier>
			<Abstract type="html">* description: The width of the original chart when exported, unless an explicit
chart.width is set. The width exported raster image
is then multiplied by scale.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sourceWidth</Declaration>
			
			
			<Anchor>//api/name/sourceWidth</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/sourceWidth</TokenIdentifier>
			<Abstract type="html">* description: The width of the original chart when exported, unless an explicit
chart.width is set. The width exported raster image
is then multiplied by scale.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sourceWidth</Declaration>
			
			
			<Anchor>//api/name/sourceWidth</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/sourceWidth</TokenIdentifier>
			<Abstract type="html">* description: The width of the original chart when exported, unless an explicit
chart.width is set. The width exported raster image
is then multiplied by scale.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sourceWidth</Declaration>
			
			
			<Anchor>//api/name/sourceWidth</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setMenuItemDefinitions:</TokenIdentifier>
			<Abstract type="html">* description: An object consisting of definitions for the menu items in the context
menu. Each key value pair has a key that is referenced in the
menuItems setting,
and a value, which is an object with the following properties:</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id menuItemDefinitions</Declaration>
			
			
			<Anchor>//api/name/menuItemDefinitions</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/menuItemDefinitions</TokenIdentifier>
			<Abstract type="html">* description: An object consisting of definitions for the menu items in the context
menu. Each key value pair has a key that is referenced in the
menuItems setting,
and a value, which is an object with the following properties:</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id menuItemDefinitions</Declaration>
			
			
			<Anchor>//api/name/menuItemDefinitions</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/menuItemDefinitions</TokenIdentifier>
			<Abstract type="html">* description: An object consisting of definitions for the menu items in the context
menu. Each key value pair has a key that is referenced in the
menuItems setting,
and a value, which is an object with the following properties:</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id menuItemDefinitions</Declaration>
			
			
			<Anchor>//api/name/menuItemDefinitions</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setChartOptions:</TokenIdentifier>
			<Abstract type="html">* description: Additional chart options to be merged into an exported chart. For
example, a common use case is to add data labels to improve readability
of the exported chart, or to add a printer-friendly color scheme.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id chartOptions</Declaration>
			
			
			<Anchor>//api/name/chartOptions</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/chartOptions</TokenIdentifier>
			<Abstract type="html">* description: Additional chart options to be merged into an exported chart. For
example, a common use case is to add data labels to improve readability
of the exported chart, or to add a printer-friendly color scheme.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id chartOptions</Declaration>
			
			
			<Anchor>//api/name/chartOptions</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/chartOptions</TokenIdentifier>
			<Abstract type="html">* description: Additional chart options to be merged into an exported chart. For
example, a common use case is to add data labels to improve readability
of the exported chart, or to add a printer-friendly color scheme.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id chartOptions</Declaration>
			
			
			<Anchor>//api/name/chartOptions</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setShowTable:</TokenIdentifier>
			<Abstract type="html">* description: Export-data module required. Show a HTML table below the chart with
the chart&apos;s current data.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *showTable</Declaration>
			
			
			<Anchor>//api/name/showTable</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/showTable</TokenIdentifier>
			<Abstract type="html">* description: Export-data module required. Show a HTML table below the chart with
the chart&apos;s current data.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *showTable</Declaration>
			
			
			<Anchor>//api/name/showTable</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/showTable</TokenIdentifier>
			<Abstract type="html">* description: Export-data module required. Show a HTML table below the chart with
the chart&apos;s current data.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *showTable</Declaration>
			
			
			<Anchor>//api/name/showTable</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setSourceHeight:</TokenIdentifier>
			<Abstract type="html">description: Analogous to sourceWidth.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sourceHeight</Declaration>
			
			
			<Anchor>//api/name/sourceHeight</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/sourceHeight</TokenIdentifier>
			<Abstract type="html">description: Analogous to sourceWidth.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sourceHeight</Declaration>
			
			
			<Anchor>//api/name/sourceHeight</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/sourceHeight</TokenIdentifier>
			<Abstract type="html">description: Analogous to sourceWidth.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sourceHeight</Declaration>
			
			
			<Anchor>//api/name/sourceHeight</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setEnabled:</TokenIdentifier>
			<Abstract type="html">* description: Whether to enable the exporting module. Disabling the module will
hide the context button, but API methods will still be available.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *enabled</Declaration>
			
			
			<Anchor>//api/name/enabled</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/enabled</TokenIdentifier>
			<Abstract type="html">* description: Whether to enable the exporting module. Disabling the module will
hide the context button, but API methods will still be available.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *enabled</Declaration>
			
			
			<Anchor>//api/name/enabled</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/enabled</TokenIdentifier>
			<Abstract type="html">* description: Whether to enable the exporting module. Disabling the module will
hide the context button, but API methods will still be available.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *enabled</Declaration>
			
			
			<Anchor>//api/name/enabled</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/setFilename:</TokenIdentifier>
			<Abstract type="html">* description: The filename, without extension, to use for the exported chart.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *filename</Declaration>
			
			
			<Anchor>//api/name/filename</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIExporting/filename</TokenIdentifier>
			<Abstract type="html">* description: The filename, without extension, to use for the exported chart.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *filename</Declaration>
			
			
			<Anchor>//api/name/filename</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIExporting/filename</TokenIdentifier>
			<Abstract type="html">* description: The filename, without extension, to use for the exported chart.</Abstract>
			<DeclaredIn>HIExporting.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *filename</Declaration>
			
			
			<Anchor>//api/name/filename</Anchor>
            <NodeRef refid="47"/>
		</Token>
		
        
        
	</File>
</Tokens>