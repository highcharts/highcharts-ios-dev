<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/HIData.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/HIData</TokenIdentifier>
			<Abstract type="html">* description: An array of data points for the series. For the bullet series type,
points can be given in the following ways:</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
            
			
			<NodeRef refid="36"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setValue:</TokenIdentifier>
			<Abstract type="html">description: The wind speed in meters per second.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *value</Declaration>
			
			
			<Anchor>//api/name/value</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/value</TokenIdentifier>
			<Abstract type="html">description: The wind speed in meters per second.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *value</Declaration>
			
			
			<Anchor>//api/name/value</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/value</TokenIdentifier>
			<Abstract type="html">description: The wind speed in meters per second.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *value</Declaration>
			
			
			<Anchor>//api/name/value</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setName:</TokenIdentifier>
			<Abstract type="html">* description: The name of the point as shown in the legend, tooltip, dataLabel
etc.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/name</TokenIdentifier>
			<Abstract type="html">* description: The name of the point as shown in the legend, tooltip, dataLabel
etc.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/name</TokenIdentifier>
			<Abstract type="html">* description: The name of the point as shown in the legend, tooltip, dataLabel
etc.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setLabelrank:</TokenIdentifier>
			<Abstract type="html">* description: The rank for this point&apos;s data label in case of collision. If two
data labels are about to overlap, only the one with the highest labelrank
will be drawn.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *labelrank</Declaration>
			
			
			<Anchor>//api/name/labelrank</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/labelrank</TokenIdentifier>
			<Abstract type="html">* description: The rank for this point&apos;s data label in case of collision. If two
data labels are about to overlap, only the one with the highest labelrank
will be drawn.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *labelrank</Declaration>
			
			
			<Anchor>//api/name/labelrank</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/labelrank</TokenIdentifier>
			<Abstract type="html">* description: The rank for this point&apos;s data label in case of collision. If two
data labels are about to overlap, only the one with the highest labelrank
will be drawn.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *labelrank</Declaration>
			
			
			<Anchor>//api/name/labelrank</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setColorIndex:</TokenIdentifier>
			<Abstract type="html">* description: Styled mode only. A specific color index to use for the point, so its
graphic representations are given the class name highcharts-color-
{n}.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *colorIndex</Declaration>
			
			
			<Anchor>//api/name/colorIndex</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/colorIndex</TokenIdentifier>
			<Abstract type="html">* description: Styled mode only. A specific color index to use for the point, so its
graphic representations are given the class name highcharts-color-
{n}.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *colorIndex</Declaration>
			
			
			<Anchor>//api/name/colorIndex</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/colorIndex</TokenIdentifier>
			<Abstract type="html">* description: Styled mode only. A specific color index to use for the point, so its
graphic representations are given the class name highcharts-color-
{n}.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *colorIndex</Declaration>
			
			
			<Anchor>//api/name/colorIndex</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setDirection:</TokenIdentifier>
			<Abstract type="html">description: The wind direction in degrees, where 0 is north (pointing towards south).</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *direction</Declaration>
			
			
			<Anchor>//api/name/direction</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/direction</TokenIdentifier>
			<Abstract type="html">description: The wind direction in degrees, where 0 is north (pointing towards south).</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *direction</Declaration>
			
			
			<Anchor>//api/name/direction</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/direction</TokenIdentifier>
			<Abstract type="html">description: The wind direction in degrees, where 0 is north (pointing towards south).</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *direction</Declaration>
			
			
			<Anchor>//api/name/direction</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setClassName:</TokenIdentifier>
			<Abstract type="html">* description: An additional, individual class name for the data point&apos;s graphic
representation.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *className</Declaration>
			
			
			<Anchor>//api/name/className</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/className</TokenIdentifier>
			<Abstract type="html">* description: An additional, individual class name for the data point&apos;s graphic
representation.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *className</Declaration>
			
			
			<Anchor>//api/name/className</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/className</TokenIdentifier>
			<Abstract type="html">* description: An additional, individual class name for the data point&apos;s graphic
representation.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *className</Declaration>
			
			
			<Anchor>//api/name/className</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setId:</TokenIdentifier>
			<Abstract type="html">* description: An id for the point. This can be used after render time to get a
pointer to the point object through chart.get().</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *id</Declaration>
			
			
			<Anchor>//api/name/id</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/id</TokenIdentifier>
			<Abstract type="html">* description: An id for the point. This can be used after render time to get a
pointer to the point object through chart.get().</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *id</Declaration>
			
			
			<Anchor>//api/name/id</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/id</TokenIdentifier>
			<Abstract type="html">* description: An id for the point. This can be used after render time to get a
pointer to the point object through chart.get().</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *id</Declaration>
			
			
			<Anchor>//api/name/id</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setY:</TokenIdentifier>
			<Abstract type="html">description: The y value of the point.
default: null</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *y</Declaration>
			
			
			<Anchor>//api/name/y</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/y</TokenIdentifier>
			<Abstract type="html">description: The y value of the point.
default: null</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *y</Declaration>
			
			
			<Anchor>//api/name/y</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/y</TokenIdentifier>
			<Abstract type="html">description: The y value of the point.
default: null</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *y</Declaration>
			
			
			<Anchor>//api/name/y</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setX:</TokenIdentifier>
			<Abstract type="html">* description: The x value of the point. For datetime axes, the X value is the timestamp
in milliseconds since 1970.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *x</Declaration>
			
			
			<Anchor>//api/name/x</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/x</TokenIdentifier>
			<Abstract type="html">* description: The x value of the point. For datetime axes, the X value is the timestamp
in milliseconds since 1970.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *x</Declaration>
			
			
			<Anchor>//api/name/x</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/x</TokenIdentifier>
			<Abstract type="html">* description: The x value of the point. For datetime axes, the X value is the timestamp
in milliseconds since 1970.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *x</Declaration>
			
			
			<Anchor>//api/name/x</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setDefinition:</TokenIdentifier>
			<Abstract type="html">* description: A description of the point to add to the screen reader information
about the point. Requires the Accessibility module.
* default: undefined</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *definition</Declaration>
			
			
			<Anchor>//api/name/definition</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/definition</TokenIdentifier>
			<Abstract type="html">* description: A description of the point to add to the screen reader information
about the point. Requires the Accessibility module.
* default: undefined</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *definition</Declaration>
			
			
			<Anchor>//api/name/definition</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/definition</TokenIdentifier>
			<Abstract type="html">* description: A description of the point to add to the screen reader information
about the point. Requires the Accessibility module.
* default: undefined</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *definition</Declaration>
			
			
			<Anchor>//api/name/definition</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setDrilldown:</TokenIdentifier>
			<Abstract type="html">* description: The id of a series in the drilldown.series
array to use for a drilldown for this point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *drilldown</Declaration>
			
			
			<Anchor>//api/name/drilldown</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/drilldown</TokenIdentifier>
			<Abstract type="html">* description: The id of a series in the drilldown.series
array to use for a drilldown for this point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *drilldown</Declaration>
			
			
			<Anchor>//api/name/drilldown</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/drilldown</TokenIdentifier>
			<Abstract type="html">* description: The id of a series in the drilldown.series
array to use for a drilldown for this point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *drilldown</Declaration>
			
			
			<Anchor>//api/name/drilldown</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setColor:</TokenIdentifier>
			<Abstract type="html">* description: Individual color for the point. By default the color is pulled from
the global colors array.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIColor *color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/color</TokenIdentifier>
			<Abstract type="html">* description: Individual color for the point. By default the color is pulled from
the global colors array.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIColor *color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/color</TokenIdentifier>
			<Abstract type="html">* description: Individual color for the point. By default the color is pulled from
the global colors array.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIColor *color</Declaration>
			
			
			<Anchor>//api/name/color</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setDataLabels:</TokenIdentifier>
			<Abstract type="html">* description: Individual data label for each point. The options are the same as
the ones for plotOptions.series.dataLabels</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id dataLabels</Declaration>
			
			
			<Anchor>//api/name/dataLabels</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/dataLabels</TokenIdentifier>
			<Abstract type="html">* description: Individual data label for each point. The options are the same as
the ones for plotOptions.series.dataLabels</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id dataLabels</Declaration>
			
			
			<Anchor>//api/name/dataLabels</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/dataLabels</TokenIdentifier>
			<Abstract type="html">* description: Individual data label for each point. The options are the same as
the ones for plotOptions.series.dataLabels</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id dataLabels</Declaration>
			
			
			<Anchor>//api/name/dataLabels</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setSelected:</TokenIdentifier>
			<Abstract type="html">description: Whether the data point is selected initially.
default: false</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *selected</Declaration>
			
			
			<Anchor>//api/name/selected</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/selected</TokenIdentifier>
			<Abstract type="html">description: Whether the data point is selected initially.
default: false</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *selected</Declaration>
			
			
			<Anchor>//api/name/selected</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/selected</TokenIdentifier>
			<Abstract type="html">description: Whether the data point is selected initially.
default: false</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *selected</Declaration>
			
			
			<Anchor>//api/name/selected</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setEvents:</TokenIdentifier>
			<Abstract type="html">description: Individual point events</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIEvents *events</Declaration>
			
			
			<Anchor>//api/name/events</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/events</TokenIdentifier>
			<Abstract type="html">description: Individual point events</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIEvents *events</Declaration>
			
			
			<Anchor>//api/name/events</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/events</TokenIdentifier>
			<Abstract type="html">description: Individual point events</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIEvents *events</Declaration>
			
			
			<Anchor>//api/name/events</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setZ:</TokenIdentifier>
			<Abstract type="html">* description: The size value for each bubble. The bubbles&apos; diameters are computed
based on the z, and controlled by series options like minSize,
maxSize, sizeBy, zMin and zMax.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *z</Declaration>
			
			
			<Anchor>//api/name/z</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/z</TokenIdentifier>
			<Abstract type="html">* description: The size value for each bubble. The bubbles&apos; diameters are computed
based on the z, and controlled by series options like minSize,
maxSize, sizeBy, zMin and zMax.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *z</Declaration>
			
			
			<Anchor>//api/name/z</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/z</TokenIdentifier>
			<Abstract type="html">* description: The size value for each bubble. The bubbles&apos; diameters are computed
based on the z, and controlled by series options like minSize,
maxSize, sizeBy, zMin and zMax.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *z</Declaration>
			
			
			<Anchor>//api/name/z</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setSeriesMapping:</TokenIdentifier>
			<Abstract type="html">* description: An array containing object with Point property names along with what
column id the property should be taken from.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray *seriesMapping</Declaration>
			
			
			<Anchor>//api/name/seriesMapping</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/seriesMapping</TokenIdentifier>
			<Abstract type="html">* description: An array containing object with Point property names along with what
column id the property should be taken from.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray *seriesMapping</Declaration>
			
			
			<Anchor>//api/name/seriesMapping</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/seriesMapping</TokenIdentifier>
			<Abstract type="html">* description: An array containing object with Point property names along with what
column id the property should be taken from.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray *seriesMapping</Declaration>
			
			
			<Anchor>//api/name/seriesMapping</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setEndRow:</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the last row (indexed by 0) to use. Defaults
to the last row containing data.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *endRow</Declaration>
			
			
			<Anchor>//api/name/endRow</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/endRow</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the last row (indexed by 0) to use. Defaults
to the last row containing data.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *endRow</Declaration>
			
			
			<Anchor>//api/name/endRow</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/endRow</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the last row (indexed by 0) to use. Defaults
to the last row containing data.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *endRow</Declaration>
			
			
			<Anchor>//api/name/endRow</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setCsv:</TokenIdentifier>
			<Abstract type="html">* description: A comma delimited string to be parsed. Related options are startRow, endRow, startColumn
and endColumn to delimit what part of the table
is used. The lineDelimiter and itemDelimiter options define the CSV delimiter formats.
The built-in CSV parser doesn&apos;t support all flavours of CSV, so in
some cases it may be necessary to use an external CSV parser. See
http://jsfiddle.net/highcharts/u59176h4/ : this example of parsing
CSV through the MIT licensed http://papaparse.com/ : Papa Parse
library.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *csv</Declaration>
			
			
			<Anchor>//api/name/csv</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/csv</TokenIdentifier>
			<Abstract type="html">* description: A comma delimited string to be parsed. Related options are startRow, endRow, startColumn
and endColumn to delimit what part of the table
is used. The lineDelimiter and itemDelimiter options define the CSV delimiter formats.
The built-in CSV parser doesn&apos;t support all flavours of CSV, so in
some cases it may be necessary to use an external CSV parser. See
http://jsfiddle.net/highcharts/u59176h4/ : this example of parsing
CSV through the MIT licensed http://papaparse.com/ : Papa Parse
library.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *csv</Declaration>
			
			
			<Anchor>//api/name/csv</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/csv</TokenIdentifier>
			<Abstract type="html">* description: A comma delimited string to be parsed. Related options are startRow, endRow, startColumn
and endColumn to delimit what part of the table
is used. The lineDelimiter and itemDelimiter options define the CSV delimiter formats.
The built-in CSV parser doesn&apos;t support all flavours of CSV, so in
some cases it may be necessary to use an external CSV parser. See
http://jsfiddle.net/highcharts/u59176h4/ : this example of parsing
CSV through the MIT licensed http://papaparse.com/ : Papa Parse
library.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *csv</Declaration>
			
			
			<Anchor>//api/name/csv</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setStartRow:</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the first row (indexed by 0) to use.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *startRow</Declaration>
			
			
			<Anchor>//api/name/startRow</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/startRow</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the first row (indexed by 0) to use.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *startRow</Declaration>
			
			
			<Anchor>//api/name/startRow</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/startRow</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the first row (indexed by 0) to use.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *startRow</Declaration>
			
			
			<Anchor>//api/name/startRow</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setFirstRowAsNames:</TokenIdentifier>
			<Abstract type="html">* description: Whether to use the first row in the data set as series names.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *firstRowAsNames</Declaration>
			
			
			<Anchor>//api/name/firstRowAsNames</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/firstRowAsNames</TokenIdentifier>
			<Abstract type="html">* description: Whether to use the first row in the data set as series names.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *firstRowAsNames</Declaration>
			
			
			<Anchor>//api/name/firstRowAsNames</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/firstRowAsNames</TokenIdentifier>
			<Abstract type="html">* description: Whether to use the first row in the data set as series names.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *firstRowAsNames</Declaration>
			
			
			<Anchor>//api/name/firstRowAsNames</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setRows:</TokenIdentifier>
			<Abstract type="html">* description: The same as the columns input option, but defining rows intead of
columns.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray&lt;NSArray*&gt; *rows</Declaration>
			
			
			<Anchor>//api/name/rows</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/rows</TokenIdentifier>
			<Abstract type="html">* description: The same as the columns input option, but defining rows intead of
columns.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray&lt;NSArray*&gt; *rows</Declaration>
			
			
			<Anchor>//api/name/rows</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/rows</TokenIdentifier>
			<Abstract type="html">* description: The same as the columns input option, but defining rows intead of
columns.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray&lt;NSArray*&gt; *rows</Declaration>
			
			
			<Anchor>//api/name/rows</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setEndColumn:</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the last column (indexed by 0) to use. Defaults
to the last column containing data.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *endColumn</Declaration>
			
			
			<Anchor>//api/name/endColumn</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/endColumn</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the last column (indexed by 0) to use. Defaults
to the last column containing data.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *endColumn</Declaration>
			
			
			<Anchor>//api/name/endColumn</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/endColumn</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the last column (indexed by 0) to use. Defaults
to the last column containing data.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *endColumn</Declaration>
			
			
			<Anchor>//api/name/endColumn</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setColumns:</TokenIdentifier>
			<Abstract type="html">* description: A two-dimensional array representing the input data on tabular form.
This input can be used when the data is already parsed, for example
from a grid view component. Each cell can be a string or number.
If not switchRowsAndColumns is set, the columns are interpreted as
series.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray&lt;NSArray*&gt; *columns</Declaration>
			
			
			<Anchor>//api/name/columns</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/columns</TokenIdentifier>
			<Abstract type="html">* description: A two-dimensional array representing the input data on tabular form.
This input can be used when the data is already parsed, for example
from a grid view component. Each cell can be a string or number.
If not switchRowsAndColumns is set, the columns are interpreted as
series.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray&lt;NSArray*&gt; *columns</Declaration>
			
			
			<Anchor>//api/name/columns</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/columns</TokenIdentifier>
			<Abstract type="html">* description: A two-dimensional array representing the input data on tabular form.
This input can be used when the data is already parsed, for example
from a grid view component. Each cell can be a string or number.
If not switchRowsAndColumns is set, the columns are interpreted as
series.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSArray&lt;NSArray*&gt; *columns</Declaration>
			
			
			<Anchor>//api/name/columns</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setDecimalPoint:</TokenIdentifier>
			<Abstract type="html">* description: The decimal point used for parsing numbers in the CSV.
If both this and data.delimiter is set to false, the parser will
attempt to deduce the decimal point automatically.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *decimalPoint</Declaration>
			
			
			<Anchor>//api/name/decimalPoint</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/decimalPoint</TokenIdentifier>
			<Abstract type="html">* description: The decimal point used for parsing numbers in the CSV.
If both this and data.delimiter is set to false, the parser will
attempt to deduce the decimal point automatically.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *decimalPoint</Declaration>
			
			
			<Anchor>//api/name/decimalPoint</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/decimalPoint</TokenIdentifier>
			<Abstract type="html">* description: The decimal point used for parsing numbers in the CSV.
If both this and data.delimiter is set to false, the parser will
attempt to deduce the decimal point automatically.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *decimalPoint</Declaration>
			
			
			<Anchor>//api/name/decimalPoint</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setParsed:</TokenIdentifier>
			<Abstract type="html">* description: A callback function to access the parsed columns, the two-dimentional
input data array directly, before they are interpreted into series
data and categories. Return false to stop completion, or call this.
complete to continue async.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *parsed</Declaration>
			
			
			<Anchor>//api/name/parsed</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/parsed</TokenIdentifier>
			<Abstract type="html">* description: A callback function to access the parsed columns, the two-dimentional
input data array directly, before they are interpreted into series
data and categories. Return false to stop completion, or call this.
complete to continue async.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *parsed</Declaration>
			
			
			<Anchor>//api/name/parsed</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/parsed</TokenIdentifier>
			<Abstract type="html">* description: A callback function to access the parsed columns, the two-dimentional
input data array directly, before they are interpreted into series
data and categories. Return false to stop completion, or call this.
complete to continue async.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *parsed</Declaration>
			
			
			<Anchor>//api/name/parsed</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setGoogleSpreadsheetWorksheet:</TokenIdentifier>
			<Abstract type="html">* description: The Google Spreadsheet worksheet to use in combination with googleSpreadsheetKey. The available id&apos;s from your sheet can be
read from https://spreadsheets.google.com/feeds/worksheets/{key}/public/basic</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *googleSpreadsheetWorksheet</Declaration>
			
			
			<Anchor>//api/name/googleSpreadsheetWorksheet</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/googleSpreadsheetWorksheet</TokenIdentifier>
			<Abstract type="html">* description: The Google Spreadsheet worksheet to use in combination with googleSpreadsheetKey. The available id&apos;s from your sheet can be
read from https://spreadsheets.google.com/feeds/worksheets/{key}/public/basic</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *googleSpreadsheetWorksheet</Declaration>
			
			
			<Anchor>//api/name/googleSpreadsheetWorksheet</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/googleSpreadsheetWorksheet</TokenIdentifier>
			<Abstract type="html">* description: The Google Spreadsheet worksheet to use in combination with googleSpreadsheetKey. The available id&apos;s from your sheet can be
read from https://spreadsheets.google.com/feeds/worksheets/{key}/public/basic</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *googleSpreadsheetWorksheet</Declaration>
			
			
			<Anchor>//api/name/googleSpreadsheetWorksheet</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setTable:</TokenIdentifier>
			<Abstract type="html">* description: A HTML table or the id of such to be parsed as input data. Related
options are startRow, endRow, startColumn and endColumn to
delimit what part of the table is used.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id table</Declaration>
			
			
			<Anchor>//api/name/table</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/table</TokenIdentifier>
			<Abstract type="html">* description: A HTML table or the id of such to be parsed as input data. Related
options are startRow, endRow, startColumn and endColumn to
delimit what part of the table is used.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id table</Declaration>
			
			
			<Anchor>//api/name/table</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/table</TokenIdentifier>
			<Abstract type="html">* description: A HTML table or the id of such to be parsed as input data. Related
options are startRow, endRow, startColumn and endColumn to
delimit what part of the table is used.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id table</Declaration>
			
			
			<Anchor>//api/name/table</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setLineDelimiter:</TokenIdentifier>
			<Abstract type="html">* description: Line delimiter for parsing CSV.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *lineDelimiter</Declaration>
			
			
			<Anchor>//api/name/lineDelimiter</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/lineDelimiter</TokenIdentifier>
			<Abstract type="html">* description: Line delimiter for parsing CSV.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *lineDelimiter</Declaration>
			
			
			<Anchor>//api/name/lineDelimiter</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/lineDelimiter</TokenIdentifier>
			<Abstract type="html">* description: Line delimiter for parsing CSV.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *lineDelimiter</Declaration>
			
			
			<Anchor>//api/name/lineDelimiter</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setDateFormat:</TokenIdentifier>
			<Abstract type="html">* description: Which of the predefined date formats in Date.prototype.dateFormats
to use to parse date values. Defaults to a best guess based on what
format gives valid and ordered dates.
Valid options include:</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *dateFormat</Declaration>
			
			
			<Anchor>//api/name/dateFormat</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/dateFormat</TokenIdentifier>
			<Abstract type="html">* description: Which of the predefined date formats in Date.prototype.dateFormats
to use to parse date values. Defaults to a best guess based on what
format gives valid and ordered dates.
Valid options include:</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *dateFormat</Declaration>
			
			
			<Anchor>//api/name/dateFormat</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/dateFormat</TokenIdentifier>
			<Abstract type="html">* description: Which of the predefined date formats in Date.prototype.dateFormats
to use to parse date values. Defaults to a best guess based on what
format gives valid and ordered dates.
Valid options include:</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *dateFormat</Declaration>
			
			
			<Anchor>//api/name/dateFormat</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setGoogleSpreadsheetKey:</TokenIdentifier>
			<Abstract type="html">* description: The key for a Google Spreadsheet to load. See https://developers.google.com/gdata/samples/spreadsheet_sample : general information
on GS.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *googleSpreadsheetKey</Declaration>
			
			
			<Anchor>//api/name/googleSpreadsheetKey</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/googleSpreadsheetKey</TokenIdentifier>
			<Abstract type="html">* description: The key for a Google Spreadsheet to load. See https://developers.google.com/gdata/samples/spreadsheet_sample : general information
on GS.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *googleSpreadsheetKey</Declaration>
			
			
			<Anchor>//api/name/googleSpreadsheetKey</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/googleSpreadsheetKey</TokenIdentifier>
			<Abstract type="html">* description: The key for a Google Spreadsheet to load. See https://developers.google.com/gdata/samples/spreadsheet_sample : general information
on GS.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *googleSpreadsheetKey</Declaration>
			
			
			<Anchor>//api/name/googleSpreadsheetKey</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setComplete:</TokenIdentifier>
			<Abstract type="html">* description: The callback that is evaluated when the data is finished loading,
optionally from an external source, and parsed. The first argument
passed is a finished chart options object, containing the series.
These options can be extended with additional options and passed
directly to the chart constructor.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *complete</Declaration>
			
			
			<Anchor>//api/name/complete</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/complete</TokenIdentifier>
			<Abstract type="html">* description: The callback that is evaluated when the data is finished loading,
optionally from an external source, and parsed. The first argument
passed is a finished chart options object, containing the series.
These options can be extended with additional options and passed
directly to the chart constructor.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *complete</Declaration>
			
			
			<Anchor>//api/name/complete</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/complete</TokenIdentifier>
			<Abstract type="html">* description: The callback that is evaluated when the data is finished loading,
optionally from an external source, and parsed. The first argument
passed is a finished chart options object, containing the series.
These options can be extended with additional options and passed
directly to the chart constructor.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *complete</Declaration>
			
			
			<Anchor>//api/name/complete</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setParseDate:</TokenIdentifier>
			<Abstract type="html">* description: A callback function to parse string representations of dates into
JavaScript timestamps. Should return an integer timestamp on success.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *parseDate</Declaration>
			
			
			<Anchor>//api/name/parseDate</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/parseDate</TokenIdentifier>
			<Abstract type="html">* description: A callback function to parse string representations of dates into
JavaScript timestamps. Should return an integer timestamp on success.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *parseDate</Declaration>
			
			
			<Anchor>//api/name/parseDate</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/parseDate</TokenIdentifier>
			<Abstract type="html">* description: A callback function to parse string representations of dates into
JavaScript timestamps. Should return an integer timestamp on success.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HIFunction *parseDate</Declaration>
			
			
			<Anchor>//api/name/parseDate</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setSwitchRowsAndColumns:</TokenIdentifier>
			<Abstract type="html">* description: Switch rows and columns of the input data, so that this.columns
effectively becomes the rows of the data set, and the rows are interpreted
as series.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *switchRowsAndColumns</Declaration>
			
			
			<Anchor>//api/name/switchRowsAndColumns</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/switchRowsAndColumns</TokenIdentifier>
			<Abstract type="html">* description: Switch rows and columns of the input data, so that this.columns
effectively becomes the rows of the data set, and the rows are interpreted
as series.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *switchRowsAndColumns</Declaration>
			
			
			<Anchor>//api/name/switchRowsAndColumns</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/switchRowsAndColumns</TokenIdentifier>
			<Abstract type="html">* description: Switch rows and columns of the input data, so that this.columns
effectively becomes the rows of the data set, and the rows are interpreted
as series.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *switchRowsAndColumns</Declaration>
			
			
			<Anchor>//api/name/switchRowsAndColumns</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setItemDelimiter:</TokenIdentifier>
			<Abstract type="html">* description: Item or cell delimiter for parsing CSV. Defaults to the tab character
\t if a tab character is found in the CSV string, if not it defaults
to ,.
If this is set to false or undefined, the parser will attempt to deduce
the delimiter automatically.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *itemDelimiter</Declaration>
			
			
			<Anchor>//api/name/itemDelimiter</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/itemDelimiter</TokenIdentifier>
			<Abstract type="html">* description: Item or cell delimiter for parsing CSV. Defaults to the tab character
\t if a tab character is found in the CSV string, if not it defaults
to ,.
If this is set to false or undefined, the parser will attempt to deduce
the delimiter automatically.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *itemDelimiter</Declaration>
			
			
			<Anchor>//api/name/itemDelimiter</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/itemDelimiter</TokenIdentifier>
			<Abstract type="html">* description: Item or cell delimiter for parsing CSV. Defaults to the tab character
\t if a tab character is found in the CSV string, if not it defaults
to ,.
If this is set to false or undefined, the parser will attempt to deduce
the delimiter automatically.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *itemDelimiter</Declaration>
			
			
			<Anchor>//api/name/itemDelimiter</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setStartColumn:</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the first column (indexed by 0) to use.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *startColumn</Declaration>
			
			
			<Anchor>//api/name/startColumn</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/startColumn</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the first column (indexed by 0) to use.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *startColumn</Declaration>
			
			
			<Anchor>//api/name/startColumn</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/startColumn</TokenIdentifier>
			<Abstract type="html">* description: In tabular input data, the first column (indexed by 0) to use.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *startColumn</Declaration>
			
			
			<Anchor>//api/name/startColumn</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setFrom:</TokenIdentifier>
			<Abstract type="html">description: The node that the link runs from.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *from</Declaration>
			
			
			<Anchor>//api/name/from</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/from</TokenIdentifier>
			<Abstract type="html">description: The node that the link runs from.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *from</Declaration>
			
			
			<Anchor>//api/name/from</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/from</TokenIdentifier>
			<Abstract type="html">description: The node that the link runs from.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *from</Declaration>
			
			
			<Anchor>//api/name/from</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setTo:</TokenIdentifier>
			<Abstract type="html">description: The node that the link runs to.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *to</Declaration>
			
			
			<Anchor>//api/name/to</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/to</TokenIdentifier>
			<Abstract type="html">description: The node that the link runs to.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *to</Declaration>
			
			
			<Anchor>//api/name/to</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/to</TokenIdentifier>
			<Abstract type="html">description: The node that the link runs to.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *to</Declaration>
			
			
			<Anchor>//api/name/to</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setWeight:</TokenIdentifier>
			<Abstract type="html">description: The weight of the link.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *weight</Declaration>
			
			
			<Anchor>//api/name/weight</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/weight</TokenIdentifier>
			<Abstract type="html">description: The weight of the link.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *weight</Declaration>
			
			
			<Anchor>//api/name/weight</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/weight</TokenIdentifier>
			<Abstract type="html">description: The weight of the link.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *weight</Declaration>
			
			
			<Anchor>//api/name/weight</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setOutgoing:</TokenIdentifier>
			<Abstract type="html">* description: Whether the link goes out of the system.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *outgoing</Declaration>
			
			
			<Anchor>//api/name/outgoing</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/outgoing</TokenIdentifier>
			<Abstract type="html">* description: Whether the link goes out of the system.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *outgoing</Declaration>
			
			
			<Anchor>//api/name/outgoing</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/outgoing</TokenIdentifier>
			<Abstract type="html">* description: Whether the link goes out of the system.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *outgoing</Declaration>
			
			
			<Anchor>//api/name/outgoing</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setColorValue:</TokenIdentifier>
			<Abstract type="html">* description: Serves a purpose only if a colorAxis object is defined in the chart
options. This value will decide which color the point gets from the
scale of the colorAxis.
* default: undefined</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *colorValue</Declaration>
			
			
			<Anchor>//api/name/colorValue</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/colorValue</TokenIdentifier>
			<Abstract type="html">* description: Serves a purpose only if a colorAxis object is defined in the chart
options. This value will decide which color the point gets from the
scale of the colorAxis.
* default: undefined</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *colorValue</Declaration>
			
			
			<Anchor>//api/name/colorValue</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/colorValue</TokenIdentifier>
			<Abstract type="html">* description: Serves a purpose only if a colorAxis object is defined in the chart
options. This value will decide which color the point gets from the
scale of the colorAxis.
* default: undefined</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *colorValue</Declaration>
			
			
			<Anchor>//api/name/colorValue</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setPointPadding:</TokenIdentifier>
			<Abstract type="html">* description: Point padding for a single point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *pointPadding</Declaration>
			
			
			<Anchor>//api/name/pointPadding</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/pointPadding</TokenIdentifier>
			<Abstract type="html">* description: Point padding for a single point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *pointPadding</Declaration>
			
			
			<Anchor>//api/name/pointPadding</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/pointPadding</TokenIdentifier>
			<Abstract type="html">* description: Point padding for a single point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *pointPadding</Declaration>
			
			
			<Anchor>//api/name/pointPadding</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setParent:</TokenIdentifier>
			<Abstract type="html">* description: Only for treemap. Use this option to build a tree structure. The
value should be the id of the point which is the parent. If no points
has a matching id, or this option is undefined, then the parent will
be set to the root.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/parent</TokenIdentifier>
			<Abstract type="html">* description: Only for treemap. Use this option to build a tree structure. The
value should be the id of the point which is the parent. If no points
has a matching id, or this option is undefined, then the parent will
be set to the root.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/parent</TokenIdentifier>
			<Abstract type="html">* description: Only for treemap. Use this option to build a tree structure. The
value should be the id of the point which is the parent. If no points
has a matching id, or this option is undefined, then the parent will
be set to the root.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSString *parent</Declaration>
			
			
			<Anchor>//api/name/parent</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setIsSum:</TokenIdentifier>
			<Abstract type="html">* description: When this property is true, the point display the total sum across
the entire series. The y value is ignored.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *isSum</Declaration>
			
			
			<Anchor>//api/name/isSum</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/isSum</TokenIdentifier>
			<Abstract type="html">* description: When this property is true, the point display the total sum across
the entire series. The y value is ignored.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *isSum</Declaration>
			
			
			<Anchor>//api/name/isSum</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/isSum</TokenIdentifier>
			<Abstract type="html">* description: When this property is true, the point display the total sum across
the entire series. The y value is ignored.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *isSum</Declaration>
			
			
			<Anchor>//api/name/isSum</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setIsIntermediateSum:</TokenIdentifier>
			<Abstract type="html">* description: When this property is true, the points acts as a summary column for
the values added or substracted since the last intermediate sum,
or since the start of the series. The y value is ignored.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *isIntermediateSum</Declaration>
			
			
			<Anchor>//api/name/isIntermediateSum</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/isIntermediateSum</TokenIdentifier>
			<Abstract type="html">* description: When this property is true, the points acts as a summary column for
the values added or substracted since the last intermediate sum,
or since the start of the series. The y value is ignored.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *isIntermediateSum</Declaration>
			
			
			<Anchor>//api/name/isIntermediateSum</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/isIntermediateSum</TokenIdentifier>
			<Abstract type="html">* description: When this property is true, the points acts as a summary column for
the values added or substracted since the last intermediate sum,
or since the start of the series. The y value is ignored.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *isIntermediateSum</Declaration>
			
			
			<Anchor>//api/name/isIntermediateSum</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setMedian:</TokenIdentifier>
			<Abstract type="html">* description: The median for each data point. This is drawn as a line through the
middle area of the box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *median</Declaration>
			
			
			<Anchor>//api/name/median</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/median</TokenIdentifier>
			<Abstract type="html">* description: The median for each data point. This is drawn as a line through the
middle area of the box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *median</Declaration>
			
			
			<Anchor>//api/name/median</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/median</TokenIdentifier>
			<Abstract type="html">* description: The median for each data point. This is drawn as a line through the
middle area of the box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *median</Declaration>
			
			
			<Anchor>//api/name/median</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setLow:</TokenIdentifier>
			<Abstract type="html">* description: The low value for each data point, signifying the lowest value
in the sample set. The bottom whisker is drawn here.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *low</Declaration>
			
			
			<Anchor>//api/name/low</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/low</TokenIdentifier>
			<Abstract type="html">* description: The low value for each data point, signifying the lowest value
in the sample set. The bottom whisker is drawn here.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *low</Declaration>
			
			
			<Anchor>//api/name/low</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/low</TokenIdentifier>
			<Abstract type="html">* description: The low value for each data point, signifying the lowest value
in the sample set. The bottom whisker is drawn here.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *low</Declaration>
			
			
			<Anchor>//api/name/low</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setHigh:</TokenIdentifier>
			<Abstract type="html">* description: The high value for each data point, signifying the highest value
in the sample set. The top whisker is drawn here.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *high</Declaration>
			
			
			<Anchor>//api/name/high</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/high</TokenIdentifier>
			<Abstract type="html">* description: The high value for each data point, signifying the highest value
in the sample set. The top whisker is drawn here.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *high</Declaration>
			
			
			<Anchor>//api/name/high</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/high</TokenIdentifier>
			<Abstract type="html">* description: The high value for each data point, signifying the highest value
in the sample set. The top whisker is drawn here.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *high</Declaration>
			
			
			<Anchor>//api/name/high</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setQ1:</TokenIdentifier>
			<Abstract type="html">* description: The lower quartile for each data point. This is the bottom of the
box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *q1</Declaration>
			
			
			<Anchor>//api/name/q1</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/q1</TokenIdentifier>
			<Abstract type="html">* description: The lower quartile for each data point. This is the bottom of the
box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *q1</Declaration>
			
			
			<Anchor>//api/name/q1</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/q1</TokenIdentifier>
			<Abstract type="html">* description: The lower quartile for each data point. This is the bottom of the
box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *q1</Declaration>
			
			
			<Anchor>//api/name/q1</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setQ3:</TokenIdentifier>
			<Abstract type="html">description: The higher quartile for each data point. This is the top of the box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *q3</Declaration>
			
			
			<Anchor>//api/name/q3</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/q3</TokenIdentifier>
			<Abstract type="html">description: The higher quartile for each data point. This is the top of the box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *q3</Declaration>
			
			
			<Anchor>//api/name/q3</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/q3</TokenIdentifier>
			<Abstract type="html">description: The higher quartile for each data point. This is the top of the box.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *q3</Declaration>
			
			
			<Anchor>//api/name/q3</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setLegendIndex:</TokenIdentifier>
			<Abstract type="html">description: The sequential index of the data point in the legend.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *legendIndex</Declaration>
			
			
			<Anchor>//api/name/legendIndex</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/legendIndex</TokenIdentifier>
			<Abstract type="html">description: The sequential index of the data point in the legend.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *legendIndex</Declaration>
			
			
			<Anchor>//api/name/legendIndex</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/legendIndex</TokenIdentifier>
			<Abstract type="html">description: The sequential index of the data point in the legend.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *legendIndex</Declaration>
			
			
			<Anchor>//api/name/legendIndex</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setSliced:</TokenIdentifier>
			<Abstract type="html">* description: Whether to display a slice offset from the center.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sliced</Declaration>
			
			
			<Anchor>//api/name/sliced</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/sliced</TokenIdentifier>
			<Abstract type="html">* description: Whether to display a slice offset from the center.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sliced</Declaration>
			
			
			<Anchor>//api/name/sliced</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/sliced</TokenIdentifier>
			<Abstract type="html">* description: Whether to display a slice offset from the center.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *sliced</Declaration>
			
			
			<Anchor>//api/name/sliced</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setLength:</TokenIdentifier>
			<Abstract type="html">* description: The length of the vector. The rendered length will relate to the
vectorLength setting.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *length</Declaration>
			
			
			<Anchor>//api/name/length</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/length</TokenIdentifier>
			<Abstract type="html">* description: The length of the vector. The rendered length will relate to the
vectorLength setting.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *length</Declaration>
			
			
			<Anchor>//api/name/length</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/length</TokenIdentifier>
			<Abstract type="html">* description: The length of the vector. The rendered length will relate to the
vectorLength setting.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *length</Declaration>
			
			
			<Anchor>//api/name/length</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setRadius:</TokenIdentifier>
			<Abstract type="html">* description: The outer radius of an individual point in a solid gauge. Can be
given as a number (pixels) or percentage string.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id radius</Declaration>
			
			
			<Anchor>//api/name/radius</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/radius</TokenIdentifier>
			<Abstract type="html">* description: The outer radius of an individual point in a solid gauge. Can be
given as a number (pixels) or percentage string.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id radius</Declaration>
			
			
			<Anchor>//api/name/radius</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/radius</TokenIdentifier>
			<Abstract type="html">* description: The outer radius of an individual point in a solid gauge. Can be
given as a number (pixels) or percentage string.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id radius</Declaration>
			
			
			<Anchor>//api/name/radius</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setInnerRadius:</TokenIdentifier>
			<Abstract type="html">* description: The inner radius of an individual point in a solid gauge. Can be
given as a number (pixels) or percentage string.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id innerRadius</Declaration>
			
			
			<Anchor>//api/name/innerRadius</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/innerRadius</TokenIdentifier>
			<Abstract type="html">* description: The inner radius of an individual point in a solid gauge. Can be
given as a number (pixels) or percentage string.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id innerRadius</Declaration>
			
			
			<Anchor>//api/name/innerRadius</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/innerRadius</TokenIdentifier>
			<Abstract type="html">* description: The inner radius of an individual point in a solid gauge. Can be
given as a number (pixels) or percentage string.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) id innerRadius</Declaration>
			
			
			<Anchor>//api/name/innerRadius</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setTargetOptions:</TokenIdentifier>
			<Abstract type="html">description: Individual target options for each point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HITargetOptions *targetOptions</Declaration>
			
			
			<Anchor>//api/name/targetOptions</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/targetOptions</TokenIdentifier>
			<Abstract type="html">description: Individual target options for each point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HITargetOptions *targetOptions</Declaration>
			
			
			<Anchor>//api/name/targetOptions</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/targetOptions</TokenIdentifier>
			<Abstract type="html">description: Individual target options for each point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) HITargetOptions *targetOptions</Declaration>
			
			
			<Anchor>//api/name/targetOptions</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/setTarget:</TokenIdentifier>
			<Abstract type="html">description: The target value of a point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *target</Declaration>
			
			
			<Anchor>//api/name/target</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIData/target</TokenIdentifier>
			<Abstract type="html">description: The target value of a point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *target</Declaration>
			
			
			<Anchor>//api/name/target</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIData/target</TokenIdentifier>
			<Abstract type="html">description: The target value of a point.</Abstract>
			<DeclaredIn>HIData.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readwrite) NSNumber *target</Declaration>
			
			
			<Anchor>//api/name/target</Anchor>
            <NodeRef refid="36"/>
		</Token>
		
        
        
	</File>
</Tokens>