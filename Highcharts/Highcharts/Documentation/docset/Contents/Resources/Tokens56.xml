<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/HIGHTML.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/HIGHTML</TokenIdentifier>
			<Abstract type="html">This is main class that operates on HTML, loading, parsing ect...</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
            
			
			<NodeRef refid="56"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/loadHTML:</TokenIdentifier>
			<Abstract type="html">Loads html from location.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>- (void)loadHTML:(NSString *)path</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">to HTML file to load.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadHTML:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/prepareJavaScript:prefix:suffix:</TokenIdentifier>
			<Abstract type="html">Prepare JS files to load name, prefix, suffix.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>- (void)prepareJavaScript:(NSString *)js prefix:(NSString *)prefix suffix:(NSString *)suffix</Declaration>
			<Parameters>
				<Parameter>
					<Name>prefix</Name>
					<Abstract type="html">JS files prefix default &apos;js/&apos;</Abstract>
				</Parameter><Parameter>
					<Name>suffix</Name>
					<Abstract type="html">JS files suffix default &apos;.js&apos;</Abstract>
				</Parameter><Parameter>
					<Name>files</Name>
					<Abstract type="html">JS files names to load from bundle. egz. &apos;highchart&apos;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/prepareJavaScript:prefix:suffix:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/prepareOptions:</TokenIdentifier>
			<Abstract type="html">Prepare options objective-c object to JS representation.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>- (void)prepareOptions:(NSDictionary *)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>options</Name>
					<Abstract type="html">NSDictionary object.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/prepareOptions:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/prepareLang:Global:</TokenIdentifier>
			<Abstract type="html">Prepare lang and global objective-c objects to JS representation.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>- (void)prepareLang:(NSDictionary *)lang Global:(NSDictionary *)global</Declaration>
			
			
			<Anchor>//api/name/prepareLang:Global:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/prepareViewWidth:height:</TokenIdentifier>
			<Abstract type="html">Prepare width and height in htm for proper display.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>- (void)prepareViewWidth:(float)width height:(float)height</Declaration>
			<Parameters>
				<Parameter>
					<Name>width</Name>
					<Abstract type="html">for wiew.</Abstract>
				</Parameter><Parameter>
					<Name>height</Name>
					<Abstract type="html">for wiew.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/prepareViewWidth:height:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/injectJavaScriptToHTML</TokenIdentifier>
			<Abstract type="html">Last step preparing HTML. After this get HTML from &apos;html&apos; property.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>- (void)injectJavaScriptToHTML</Declaration>
			
			
			<Anchor>//api/name/injectJavaScriptToHTML</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/setBaseURL:</TokenIdentifier>
			<Abstract type="html">Options for the Boost module. The Boost module allows certain series types
to be rendered by WebGL instead of the default SVG. This allows hundreds of
thousands of data points to be rendered in milliseconds. In addition to the
WebGL rendering it saves time by skipping processing and inspection of the
data wherever possible.
In addition to the global boost option, each series has a
boostThreshold that defines when the
boost should kick in.
Requires the modules/boost.js module.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *baseURL</Declaration>
			
			
			<Anchor>//api/name/baseURL</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/baseURL</TokenIdentifier>
			<Abstract type="html">Options for the Boost module. The Boost module allows certain series types
to be rendered by WebGL instead of the default SVG. This allows hundreds of
thousands of data points to be rendered in milliseconds. In addition to the
WebGL rendering it saves time by skipping processing and inspection of the
data wherever possible.
In addition to the global boost option, each series has a
boostThreshold that defines when the
boost should kick in.
Requires the modules/boost.js module.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *baseURL</Declaration>
			
			
			<Anchor>//api/name/baseURL</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIGHTML/baseURL</TokenIdentifier>
			<Abstract type="html">Options for the Boost module. The Boost module allows certain series types
to be rendered by WebGL instead of the default SVG. This allows hundreds of
thousands of data points to be rendered in milliseconds. In addition to the
WebGL rendering it saves time by skipping processing and inspection of the
data wherever possible.
In addition to the global boost option, each series has a
boostThreshold that defines when the
boost should kick in.
Requires the modules/boost.js module.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *baseURL</Declaration>
			
			
			<Anchor>//api/name/baseURL</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/setHtml:</TokenIdentifier>
			<Abstract type="html">This is parsed HTML.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, readonly) NSString *html</Declaration>
			
			
			<Anchor>//api/name/html</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/html</TokenIdentifier>
			<Abstract type="html">This is parsed HTML.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, readonly) NSString *html</Declaration>
			
			
			<Anchor>//api/name/html</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIGHTML/html</TokenIdentifier>
			<Abstract type="html">This is parsed HTML.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, readonly) NSString *html</Declaration>
			
			
			<Anchor>//api/name/html</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/setOptions:</TokenIdentifier>
			<Abstract type="html">This is options object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *options</Declaration>
			
			
			<Anchor>//api/name/options</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/options</TokenIdentifier>
			<Abstract type="html">This is options object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *options</Declaration>
			
			
			<Anchor>//api/name/options</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIGHTML/options</TokenIdentifier>
			<Abstract type="html">This is options object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *options</Declaration>
			
			
			<Anchor>//api/name/options</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/setLang:</TokenIdentifier>
			<Abstract type="html">This is lang object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *lang</Declaration>
			
			
			<Anchor>//api/name/lang</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/lang</TokenIdentifier>
			<Abstract type="html">This is lang object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *lang</Declaration>
			
			
			<Anchor>//api/name/lang</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIGHTML/lang</TokenIdentifier>
			<Abstract type="html">This is lang object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *lang</Declaration>
			
			
			<Anchor>//api/name/lang</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/setGlobal:</TokenIdentifier>
			<Abstract type="html">This is global object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *global</Declaration>
			
			
			<Anchor>//api/name/global</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HIGHTML/global</TokenIdentifier>
			<Abstract type="html">This is global object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *global</Declaration>
			
			
			<Anchor>//api/name/global</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HIGHTML/global</TokenIdentifier>
			<Abstract type="html">This is global object injected to WebView.</Abstract>
			<DeclaredIn>HIGHTML.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *global</Declaration>
			
			
			<Anchor>//api/name/global</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
        
        
	</File>
</Tokens>