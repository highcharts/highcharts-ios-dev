//
//  HIClassJSMethods.m
//  Highcharts
//
//  License: www.highcharts.com/license
//  Copyright Â© 2018 Highsoft AS. All rights reserved.
//

#import "HIClassJSMethods.h"
#import "HIGJavaScript.h"

@implementation HIClassJSMethods

+ (NSString *)getJCClassMethodString:(NSDictionary *)dict {

    NSMutableArray *args = [[NSMutableArray alloc] initWithObjects:[NSNull null], [NSNull null], [NSNull null], [NSNull null], [NSNull null], nil];
    NSMutableArray *params = [dict[@"params"] mutableCopy];
    
    HIGJavaScript *js = [[HIGJavaScript alloc] init];
    
    if (dict[@"params"] && [dict[@"params"] isKindOfClass:[NSArray class]]) {
        for (int i=0; i<params.count; i++) {
            if ([params[i] isKindOfClass:[NSDictionary class]] || [params[i] isKindOfClass:[NSArray class]]) {
                [args replaceObjectAtIndex:i withObject:[js JSObject:params[i]]];
            }
            else {
                [args replaceObjectAtIndex:i withObject:params[i]];
            }
        }
    }
    
    NSLog(@"%@", args);
    NSLog(@"%@", params);
   
    NSDictionary *functions = @{
                                @"Annotation":
                                    @{
                                        @"destroy": [NSString stringWithFormat:@"(function destroy(wrapperID) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.destroy(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"redraw": [NSString stringWithFormat:@"(function redraw(wrapperID) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.redraw(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"render": [NSString stringWithFormat:@"(function render(wrapperID) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.render(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"setVisible0": [NSString stringWithFormat:@"(function setVisible(wrapperID) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.setVisible(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"setVisible1": [NSString stringWithFormat:@"(function setVisible(wrapperID, visibility) { chart.annotations.forEach(function(currentAnnotations) { if (currentAnnotations.options._wrapperID === wrapperID) { currentAnnotations.setVisible(visibility); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]]
                                    },
                                @"Axis":
                                    @{
                                        @"addPlotBand": [NSString stringWithFormat:@"(function addPlotBand(axis, wrapperID, options) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotBand(options); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotBand(options); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.addPlotBand(options); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]],
                                        @"addPlotLine": [NSString stringWithFormat:@"(function addPlotLine(axis, wrapperID, options) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotLine(options); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addPlotLine(options); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.addPlotLine(options); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]],
                                        @"addTitle": [NSString stringWithFormat:@"(function addTitle(axis, wrapperID, display) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addTitle(display); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.addTitle(display); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.addTitle(display); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]],
                                        @"drawCrosshair": [NSString stringWithFormat:@"(function drawCrosshair(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.drawCrosshair(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.drawCrosshair(); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.drawCrosshair(); return; } break; default: return; } })(\"%@\", \"%@\");", dict[@"axis"], dict[@"id"]],
                                        @"hideCrosshair": [NSString stringWithFormat:@"(function hideCrosshair(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.hideCrosshair(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.hideCrosshair(); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.hideCrosshair(); return; } break; default: return; } })(\"%@\", \"%@\");", dict[@"axis"], dict[@"id"]],
                                        @"remove0": [NSString stringWithFormat:@"(function remove(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.remove(); return; } break; default: return; } })(\"%@\", \"%@\");", dict[@"axis"], dict[@"id"]],
                                        @"remove1": [NSString stringWithFormat:@"(function remove(axis, wrapperID, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.remove(redraw); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.remove(redraw); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]],
                                        @"removePlotBand": [NSString stringWithFormat:@"(function removePlotBand(axis, wrapperID, id) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotBand(id); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotBand(id); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.removePlotBand(id); return; } break; default: return; } })(\"%@\", \"%@\", \"%@\");", dict[@"axis"], dict[@"id"], args[0]],
                                        @"removePlotLine": [NSString stringWithFormat:@"(function removePlotLine(axis, wrapperID, id) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotLine(id); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.removePlotLine(id); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.removePlotLine(id); return; } break; default: return; } })(\"%@\", \"%@\", \"%@\");", dict[@"axis"], dict[@"id"], args[0]],
                                        @"renderLine": [NSString stringWithFormat:@"(function renderLine(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderLine(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderLine(); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.renderLine(); return; } break; default: return; } })(\"%@\", \"%@\");", dict[@"axis"], dict[@"id"]],
                                        @"renderMinorTick": [NSString stringWithFormat:@"(function renderMinorTick(axis, wrapperID, pos) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderMinorTick(pos); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderMinorTick(pos); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.renderMinorTick(pos); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]],
                                        @"renderTick": [NSString stringWithFormat:@"(function renderTick(axis, wrapperID, pos, i) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderTick(pos, i); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.renderTick(pos, i); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.renderTick(pos, i); return; } break; default: return; } })(\"%@\", \"%@\", %@, %@);", dict[@"axis"], dict[@"id"], args[0], args[1]],
                                        @"setCategories0": [NSString stringWithFormat:@"(function setCategories(axis, wrapperID, categories) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setCategories(categories); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]],
                                        @"setCategories1": [NSString stringWithFormat:@"(function setCategories(axis, wrapperID, categories, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories, redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setCategories(categories, redraw); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setCategories(categories, redraw); return; } break; default: return; } })(\"%@\", \"%@\", %@, %@);", dict[@"axis"], dict[@"id"], args[0], args[1]],
                                        @"setExtremes0": [NSString stringWithFormat:@"(function setExtremes(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setExtremes(); return; } break; default: return; } })(\"%@\", \"%@\");", dict[@"axis"], dict[@"id"]],
                                        @"setExtremes1": [NSString stringWithFormat:@"(function setExtremes(axis, wrapperID, newMin) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setExtremes(newMin); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]],
                                        @"setExtremes2": [NSString stringWithFormat:@"(function setExtremes(axis, wrapperID, newMin, newMax) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setExtremes(newMin, newMax); return; } break; default: return; } })(\"%@\", \"%@\", %@, %@);", dict[@"axis"], dict[@"id"], args[0], args[1]],
                                        @"setExtremes3": [NSString stringWithFormat:@"(function setExtremes(axis, wrapperID, newMin, newMax, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setExtremes(newMin, newMax, redraw); return; } break; default: return; } })(\"%@\", \"%@\", %@, %@, %@);", dict[@"axis"], dict[@"id"], args[0], args[1], args[2]],
                                        @"setExtremes4": [NSString stringWithFormat:@"(function setExtremes(axis, wrapperID, newMin, newMax, redraw, animation) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw, animation); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setExtremes(newMin, newMax, redraw, animation); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setExtremes(newMin, newMax, redraw, animation); return; } break; default: return; } })(\"%@\", \"%@\", %@, %@, %@, %@);", dict[@"axis"], dict[@"id"], args[0], args[1], args[2], args[3]],
                                        @"setTickPositions": [NSString stringWithFormat:@"(function setTickPositions(axis, wrapperID) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTickPositions(); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTickPositions(); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setTickPositions(); return; } break; default: return; } })(\"%@\", \"%@\");", dict[@"axis"], dict[@"id"]],
                                        @"setTitle0": [NSString stringWithFormat:@"(function setTitle(axis, wrapperID, title) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setTitle(title); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]],
                                        @"setTitle1": [NSString stringWithFormat:@"(function setTitle(axis, wrapperID, title, redraw) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title, redraw); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.setTitle(title, redraw); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.setTitle(title, redraw); return; } break; default: return; } })(\"%@\", \"%@\", %@, %@);", dict[@"axis"], dict[@"id"], args[0], args[1]],
                                        @"update": [NSString stringWithFormat:@"(function update(axis, wrapperID, options) { switch(axis) { case \"x\": chart.xAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.update(options); return; } }); break; case \"y\": chart.yAxis.forEach(function(currentAxis){ if (currentAxis.options._wrapperID === wrapperID) { currentAxis.update(options); return; } }); break; case \"z\": if (chart.zAxis.options._wrapperID === wrapperID) { chart.zAxis.update(options); return; } break; default: return; } })(\"%@\", \"%@\", %@);", dict[@"axis"], dict[@"id"], args[0]]
                                        },
                                @"Chart":
                                    @{
                                        @"drillUp": @"(function drillUp() { chart.drillUp(); })();",
                                        @"addAnnotation": [NSString stringWithFormat:@"(function addAnnotation(options) { chart.addAnnotation(options); })(%@);", args[0]],
                                        @"addAxis0": [NSString stringWithFormat:@"(function addAxis(options, isX) { chart.addAxis(options, isX); })(%@, %@);", args[0], args[1]],
                                        @"addAxis1": [NSString stringWithFormat:@"(function addAxis(options, isX, redraw) { chart.addAxis(options, isX, redraw); })(%@, %@, %@);", args[0], args[1], args[2]],
                                        @"addAxis2": [NSString stringWithFormat:@"(function addAxis(options, isX, redraw, animation) { chart.addAxis(options, isX, redraw, animation); })(%@, %@, %@, %@);", args[0], args[1], args[2], args[3]],
                                        @"addCredits": [NSString stringWithFormat:@"(function addCredits(options) { chart.addCredits(options); })(%@);", args[0]],
                                        @"addSeries0": [NSString stringWithFormat:@"(function addSeries(options) { chart.addSeries(options); })(%@);", args[0]],
                                        @"addSeries1": [NSString stringWithFormat:@"(function addSeries(options, redraw) { chart.addSeries(options, redraw); })(%@, %@);", args[0], args[1]],
                                        @"addSeries2": [NSString stringWithFormat:@"(function addSeries(options, redraw, animation) { chart.addSeries(options, redraw, animation); })(%@, %@, %@);", args[0], args[1], args[2]],
                                        @"addSeriesAsDrilldown": [NSString stringWithFormat:@"(function addSeriesAsDrilldown(point, options) { chart.addSeriesAsDrilldown(point, options); })(%@, %@);", args[0], args[1]],
                                        @"destroy": @"(function destroy() { chart.destroy(); })();",
                                        @"hideLoading": @"(function hideLoading() { chart.hideLoading(); })();",
                                        @"redraw0": @"(function redraw() { chart.redraw(); })();",
                                        @"redraw1": [NSString stringWithFormat:@"(function redraw(animation) { chart.redraw(animation); })(%@);", args[0]],
                                        @"removeAnnotation": [NSString stringWithFormat:@"(function removeAnnotation(id) { chart.removeAnnotation(id); })(\"%@\");", args[0]],
                                        @"setSubtitle": [NSString stringWithFormat:@"(function setSubtitle(options) { chart.setSubtitle(options); })(%@);", args[0]],
                                        @"setTitle": [NSString stringWithFormat:@"(function setTitle(titleOptions, subtitleOptions, redraw) { chart.setTitle(titleOptions, subtitleOptions, redraw); })(%@, %@, %@);", args[0], args[1], args[2]],
                                        @"showLoading": [NSString stringWithFormat:@"(function showLoading(str) { chart.showLoading(str); })(\"%@\");", args[0]],
                                        @"zoomOut": @"(function zoomOut() { chart.zoomOut(); })();"
                                    },
                                @"Legend":
                                    @{
                                        @"setText": [NSString stringWithFormat:@" (function setText(wrapperID, item) { if (chart.legend.options._wrapperID === wrapperID) { chart.legend.setText(item); return; } })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"update0": [NSString stringWithFormat:@" (function update(wrapperID, options) { if (chart.legend.options._wrapperID === wrapperID) { chart.legend.update(options); return; } })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"update1": [NSString stringWithFormat:@" (function update(wrapperID, options, redraw) { if (chart.legend.options._wrapperID === wrapperID) { chart.legend.update(options, redraw); return; } })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]]
                                    },
                                @"PlotLineOrBand":
                                    @{
                                        @"destroy": [NSString stringWithFormat:@"(function destroy(wrapperID) { chart.xAxis.forEach(function(currentAxis) { currentAxis.plotLinesAndBands.forEach(function(currentLineAndBand) { if (currentLineAndBand.options._wrapperID === wrapperID ) { currentLineAndBand.destroy(); return; } }); }); chart.yAxis.forEach(function(currentAxis) { currentAxis.plotLinesAndBands.forEach(function(currentLineAndBand) { if (currentLineAndBand.options._wrapperID === wrapperID ) { currentLineAndBand.destroy(); return; } }); }); })(\"%@\");", dict[@"id"]]
                                    },
                                @"Point":
                                    @{
                                        @"onMouseOut": [NSString stringWithFormat:@"(function onMouseOut(wrapperID) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.onMouseOut(); return; } }); }); })(\"%@\");", dict[@"id"]],
                                        @"remove0": [NSString stringWithFormat:@"(function remove(wrapperID, redraw) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.remove(redraw); return; } }); }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"remove1": [NSString stringWithFormat:@"(function remove(wrapperID, redraw, animation) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.remove(redraw, animation); return; } }); }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]],
                                        @"select0": [NSString stringWithFormat:@"(function select(wrapperID) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.select(); return; } }); }); })(\"%@\");", dict[@"id"]],
                                        @"select1": [NSString stringWithFormat:@"(function select(wrapperID, selected) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.select(selected); return; } }); }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"select2": [NSString stringWithFormat:@"(function select(wrapperID, selected, accumulate) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.select(selected, accumulate); return; } }); }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]],
                                        @"setNestedProperty": [NSString stringWithFormat:@"(function setNestedProperty(wrapperID, object, value, key) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.setNestedProperty(object, value, key); return; } }); }); })(\"%@\", %@, %@, \"%@\");", dict[@"id"], args[0], args[1], args[2]],
                                        @"setState0": [NSString stringWithFormat:@"(function setState(wrapperID) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.setState(); return; } }); }); })(\"%@\");", dict[@"id"]],
                                        @"setState1": [NSString stringWithFormat:@"(function setState(wrapperID, state) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.setState(state); return; } }); }); })(\"%@\", \"%@\");", dict[@"id"], args[0]],
                                        @"setState2": [NSString stringWithFormat:@"(function setState(wrapperID, state, move) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.setState(state, move); return; } }); }); })(\"%@\", \"%@\", %@);", dict[@"id"], args[0], args[1]],
                                        @"tooltipFormatter": [NSString stringWithFormat:@"(function tooltipFormatter(wrapperID, pointFormat) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.tooltipFormatter(pointFormat); return; } }); }); })(\"%@\", \"%@\");", dict[@"id"], args[0]],
                                        @"update0": [NSString stringWithFormat:@"(function update(wrapperID, options) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.update(options); return; } }); }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"update1": [NSString stringWithFormat:@"(function update(wrapperID, options, redraw) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.update(options, redraw); return; } }); }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]],
                                        @"update2": [NSString stringWithFormat:@"(function update(wrapperID, options, redraw, animation) { chart.series.forEach(function(serie) { serie.data.forEach(function(point) { if (point.options._wrapperID === wrapperID) { point.update(options, redraw, animation); return; } }); }); })(\"%@\", %@, %@, %@);", dict[@"id"], args[0], args[1], args[2]]
                                    },
                                @"Series":
                                    @{
                                        @"addPoint0": [NSString stringWithFormat:@"(function addPoint(wrapperID, options) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.addPoint(options); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"addPoint1": [NSString stringWithFormat:@"(function addPoint(wrapperID, options, redraw) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.addPoint(options, redraw); return; } }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]],
                                        @"addPoint2": [NSString stringWithFormat:@"(function addPoint(wrapperID, options, redraw, shift) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.addPoint(options, redraw, shift); return; } }); })(\"%@\", %@, %@, %@);", dict[@"id"], args[0], args[1], args[2]],
                                        @"addPoint3": [NSString stringWithFormat:@"(function addPoint(wrapperID, options, redraw, shift, animation) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.addPoint(options, redraw, shift, animation); return; } }); })(\"%@\", %@, %@, %@, %@);", dict[@"id"], args[0], args[1], args[2], args[3]],
                                        @"animate": [NSString stringWithFormat:@"(function animate(wrapperID, init) { chart.series.forEach(function(serie) { if(serie.options._wrapperID === wrapperID) { serie.animate(init); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"drawGraph": [NSString stringWithFormat:@"(function drawGraph(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.drawGraph(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"drawPoints": [NSString stringWithFormat:@"(function drawPoints(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.drawPoints(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"hide": [NSString stringWithFormat:@"(function hide(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.hide(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"onMouseOut": [NSString stringWithFormat:@"(function onMouseOut(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.onMouseOut(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"onMouseOver": [NSString stringWithFormat:@"(function onMouseOver(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.onMouseOver(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"remove0": [NSString stringWithFormat:@"(function remove(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.remove(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"remove1": [NSString stringWithFormat:@"(function remove(wrapperID, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.remove(redraw); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"remove2": [NSString stringWithFormat:@"(function remove(wrapperID, redraw, animation) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.remove(redraw, animation); return; } }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]],
                                        @"remove3": [NSString stringWithFormat:@"(function remove(wrapperID, redraw, animation, withEvent) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.remove(redraw, animation, withEvent); return; } }); })(\"%@\", %@, %@, %@);", dict[@"id"], args[0], args[1], args[2]],
                                        @"removePoint0": [NSString stringWithFormat:@"(function removePoint(wrapperID, i) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.removePoint(i); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"removePoint1": [NSString stringWithFormat:@"(function removePoint(wrapperID, i, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.removePoint(i, redraw); return; } }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]],
                                        @"removePoint2": [NSString stringWithFormat:@"(function removePoint(wrapperID, i, redraw, animation) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.removePoint(i, redraw, animation); return; } }); })(\"%@\", %@, %@, %@);", dict[@"id"], args[0], args[1], args[2]],
                                        @"render": [NSString stringWithFormat:@"(function render(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.render(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"select0": [NSString stringWithFormat:@"(function select(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.select(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"select1": [NSString stringWithFormat:@"(function select(wrapperID, selected) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.select(selected); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"setData0": [NSString stringWithFormat:@"(function setData(wrapperID, data) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setData(data); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"setData1": [NSString stringWithFormat:@"(function setData(wrapperID, data, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setData(data, redraw); return; } }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]],
                                        @"setData2": [NSString stringWithFormat:@"(function setData(wrapperID, data, redraw, animation) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setData(data, redraw, animation); return; } }); })(\"%@\", %@, %@, %@);", dict[@"id"], args[0], args[1], args[2]],
                                        @"setData3": [NSString stringWithFormat:@"(function setData(wrapperID, data, redraw, animation, updatePoints) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setData(data, redraw, animation, updatePoints); return; } }); })(\"%@\", %@, %@, %@, %@);", dict[@"id"], args[0], args[1], args[2], args[3]],
                                        @"setOptions": [NSString stringWithFormat:@"(function setOptions(wrapperID, itemOptions) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setOptions(itemOptions); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"setState0": [NSString stringWithFormat:@"(function setState(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setState(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"setState1": [NSString stringWithFormat:@"(function setState(wrapperID, state) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setState(state); return; } }); })(\"%@\", \"%@\");", dict[@"id"], args[0]],
                                        @"setVisible0": [NSString stringWithFormat:@"(function setVisible(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setVisible(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"setVisible1": [NSString stringWithFormat:@"(function setVisible(wrapperID, visible) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setVisible(visible); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"setVisible2": [NSString stringWithFormat:@"(function setVisible(wrapperID, visible, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.setVisible(visible, redraw); return; } }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]],
                                        @"show": [NSString stringWithFormat:@"(function show(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.show(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"translate": [NSString stringWithFormat:@"(function translate(wrapperID) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.translate(); return; } }); })(\"%@\");", dict[@"id"]],
                                        @"update0": [NSString stringWithFormat:@"(function update(wrapperID, options) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.update(options); return; } }); })(\"%@\", %@);", dict[@"id"], args[0]],
                                        @"update1": [NSString stringWithFormat:@"(function update(wrapperID, options, redraw) { chart.series.forEach(function(serie) { if (serie.options._wrapperID === wrapperID) { serie.update(options, redraw); return; } }); })(\"%@\", %@, %@);", dict[@"id"], args[0], args[1]]
                                    }
                                };
    
    return functions[dict[@"class"]][dict[@"method"]];
}

@end
